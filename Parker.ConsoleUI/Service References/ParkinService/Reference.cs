//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Parker.ConsoleUI.ParkinService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Vehicle", Namespace="http://schemas.datacontract.org/2004/07/Parker.Entity")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Parker.ConsoleUI.ParkinService.ParkingToken))]
    public partial class Vehicle : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string OwnerInfok__BackingFieldField;
        
        private Parker.ConsoleUI.ParkinService.VehicleType VehicleTypek__BackingFieldField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<OwnerInfo>k__BackingField", IsRequired=true)]
        public string OwnerInfok__BackingField {
            get {
                return this.OwnerInfok__BackingFieldField;
            }
            set {
                if ((object.ReferenceEquals(this.OwnerInfok__BackingFieldField, value) != true)) {
                    this.OwnerInfok__BackingFieldField = value;
                    this.RaisePropertyChanged("OwnerInfok__BackingField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<VehicleType>k__BackingField", IsRequired=true)]
        public Parker.ConsoleUI.ParkinService.VehicleType VehicleTypek__BackingField {
            get {
                return this.VehicleTypek__BackingFieldField;
            }
            set {
                if ((this.VehicleTypek__BackingFieldField.Equals(value) != true)) {
                    this.VehicleTypek__BackingFieldField = value;
                    this.RaisePropertyChanged("VehicleTypek__BackingField");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ParkingToken", Namespace="http://schemas.datacontract.org/2004/07/Parker.Entity")]
    [System.SerializableAttribute()]
    public partial class ParkingToken : Parker.ConsoleUI.ParkinService.Vehicle {
        
        private System.DateTime CheckinTimek__BackingFieldField;
        
        private int ParkingNumberk__BackingFieldField;
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<CheckinTime>k__BackingField", IsRequired=true)]
        public System.DateTime CheckinTimek__BackingField {
            get {
                return this.CheckinTimek__BackingFieldField;
            }
            set {
                if ((this.CheckinTimek__BackingFieldField.Equals(value) != true)) {
                    this.CheckinTimek__BackingFieldField = value;
                    this.RaisePropertyChanged("CheckinTimek__BackingField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<ParkingNumber>k__BackingField", IsRequired=true)]
        public int ParkingNumberk__BackingField {
            get {
                return this.ParkingNumberk__BackingFieldField;
            }
            set {
                if ((this.ParkingNumberk__BackingFieldField.Equals(value) != true)) {
                    this.ParkingNumberk__BackingFieldField = value;
                    this.RaisePropertyChanged("ParkingNumberk__BackingField");
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="VehicleType", Namespace="http://schemas.datacontract.org/2004/07/Parker.Entity.CustomType")]
    public enum VehicleType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Bike = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Car = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Van = 3,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ParkinService.IParking")]
    public interface IParking {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IParking/GetAvailableFloors", ReplyAction="http://tempuri.org/IParking/GetAvailableFloorsResponse")]
        string[] GetAvailableFloors(string vehicleType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IParking/GetAvailableFloors", ReplyAction="http://tempuri.org/IParking/GetAvailableFloorsResponse")]
        System.Threading.Tasks.Task<string[]> GetAvailableFloorsAsync(string vehicleType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IParking/Checkin", ReplyAction="http://tempuri.org/IParking/CheckinResponse")]
        Parker.ConsoleUI.ParkinService.ParkingToken Checkin(string vehicleType, string parkingFloor, string vehicleInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IParking/Checkin", ReplyAction="http://tempuri.org/IParking/CheckinResponse")]
        System.Threading.Tasks.Task<Parker.ConsoleUI.ParkinService.ParkingToken> CheckinAsync(string vehicleType, string parkingFloor, string vehicleInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IParking/Checkout", ReplyAction="http://tempuri.org/IParking/CheckoutResponse")]
        bool Checkout(string vehicleType, string parkingFloor, string vehicleInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IParking/Checkout", ReplyAction="http://tempuri.org/IParking/CheckoutResponse")]
        System.Threading.Tasks.Task<bool> CheckoutAsync(string vehicleType, string parkingFloor, string vehicleInfo);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IParkingChannel : Parker.ConsoleUI.ParkinService.IParking, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ParkingClient : System.ServiceModel.ClientBase<Parker.ConsoleUI.ParkinService.IParking>, Parker.ConsoleUI.ParkinService.IParking {
        
        public ParkingClient() {
        }
        
        public ParkingClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ParkingClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ParkingClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ParkingClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string[] GetAvailableFloors(string vehicleType) {
            return base.Channel.GetAvailableFloors(vehicleType);
        }
        
        public System.Threading.Tasks.Task<string[]> GetAvailableFloorsAsync(string vehicleType) {
            return base.Channel.GetAvailableFloorsAsync(vehicleType);
        }
        
        public Parker.ConsoleUI.ParkinService.ParkingToken Checkin(string vehicleType, string parkingFloor, string vehicleInfo) {
            return base.Channel.Checkin(vehicleType, parkingFloor, vehicleInfo);
        }
        
        public System.Threading.Tasks.Task<Parker.ConsoleUI.ParkinService.ParkingToken> CheckinAsync(string vehicleType, string parkingFloor, string vehicleInfo) {
            return base.Channel.CheckinAsync(vehicleType, parkingFloor, vehicleInfo);
        }
        
        public bool Checkout(string vehicleType, string parkingFloor, string vehicleInfo) {
            return base.Channel.Checkout(vehicleType, parkingFloor, vehicleInfo);
        }
        
        public System.Threading.Tasks.Task<bool> CheckoutAsync(string vehicleType, string parkingFloor, string vehicleInfo) {
            return base.Channel.CheckoutAsync(vehicleType, parkingFloor, vehicleInfo);
        }
    }
}
